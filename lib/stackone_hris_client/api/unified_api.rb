=begin
#StackOne Unified API

#The documentation for the StackOne Unified API

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'cgi'

module StackOneHrisClient
  class UnifiedApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param service [String] 
    # @param resource [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page The page number of the results to fetch
    # @option opts [String] :page_size The number of results per page (default to '25')
    # @option opts [Boolean] :raw Indicates that the raw request result is returned (default to false)
    # @option opts [Array<String>] :fields The list of fields to return in the response (if empty, all fields are returned)
    # @option opts [Array<String>] :expand The list of fields that will be expanded in the response
    # @return [nil]
    def find_all(service, resource, opts = {})
      find_all_with_http_info(service, resource, opts)
      nil
    end

    # @param service [String] 
    # @param resource [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page The page number of the results to fetch
    # @option opts [String] :page_size The number of results per page (default to '25')
    # @option opts [Boolean] :raw Indicates that the raw request result is returned (default to false)
    # @option opts [Array<String>] :fields The list of fields to return in the response (if empty, all fields are returned)
    # @option opts [Array<String>] :expand The list of fields that will be expanded in the response
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def find_all_with_http_info(service, resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnifiedApi.find_all ...'
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling UnifiedApi.find_all"
      end
      # verify the required parameter 'resource' is set
      if @api_client.config.client_side_validation && resource.nil?
        fail ArgumentError, "Missing the required parameter 'resource' when calling UnifiedApi.find_all"
      end
      # resource path
      local_var_path = '/unified/{service}/{resource}'.sub('{' + 'service' + '}', CGI.escape(service.to_s)).sub('{' + 'resource' + '}', CGI.escape(resource.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'raw'] = opts[:'raw'] if !opts[:'raw'].nil?
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :multi) if !opts[:'fields'].nil?
      query_params[:'expand'] = @api_client.build_collection_param(opts[:'expand'], :multi) if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic']

      new_options = opts.merge(
        :operation => :"UnifiedApi.find_all",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnifiedApi#find_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param service [String] 
    # @param resource [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page The page number of the results to fetch
    # @option opts [String] :page_size The number of results per page (default to '25')
    # @option opts [Boolean] :raw Indicates that the raw request result is returned (default to false)
    # @option opts [Array<String>] :fields The list of fields to return in the response (if empty, all fields are returned)
    # @option opts [Array<String>] :expand The list of fields that will be expanded in the response
    # @return [nil]
    def find_one(service, resource, id, opts = {})
      find_one_with_http_info(service, resource, id, opts)
      nil
    end

    # @param service [String] 
    # @param resource [String] 
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page The page number of the results to fetch
    # @option opts [String] :page_size The number of results per page (default to '25')
    # @option opts [Boolean] :raw Indicates that the raw request result is returned (default to false)
    # @option opts [Array<String>] :fields The list of fields to return in the response (if empty, all fields are returned)
    # @option opts [Array<String>] :expand The list of fields that will be expanded in the response
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def find_one_with_http_info(service, resource, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnifiedApi.find_one ...'
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling UnifiedApi.find_one"
      end
      # verify the required parameter 'resource' is set
      if @api_client.config.client_side_validation && resource.nil?
        fail ArgumentError, "Missing the required parameter 'resource' when calling UnifiedApi.find_one"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UnifiedApi.find_one"
      end
      # resource path
      local_var_path = '/unified/{service}/{resource}/{id}'.sub('{' + 'service' + '}', CGI.escape(service.to_s)).sub('{' + 'resource' + '}', CGI.escape(resource.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'raw'] = opts[:'raw'] if !opts[:'raw'].nil?
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :multi) if !opts[:'fields'].nil?
      query_params[:'expand'] = @api_client.build_collection_param(opts[:'expand'], :multi) if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic']

      new_options = opts.merge(
        :operation => :"UnifiedApi.find_one",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnifiedApi#find_one\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param proxy_request_body [ProxyRequestBody] the body param
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def proxy(proxy_request_body, opts = {})
      proxy_with_http_info(proxy_request_body, opts)
      nil
    end

    # @param proxy_request_body [ProxyRequestBody] the body param
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def proxy_with_http_info(proxy_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnifiedApi.proxy ...'
      end
      # verify the required parameter 'proxy_request_body' is set
      if @api_client.config.client_side_validation && proxy_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'proxy_request_body' when calling UnifiedApi.proxy"
      end
      # resource path
      local_var_path = '/unified/proxy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(proxy_request_body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basic']

      new_options = opts.merge(
        :operation => :"UnifiedApi.proxy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnifiedApi#proxy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
